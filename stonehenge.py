#!/usr/bin/python
'''Example of using pyKML to visualize ephemeris data

This example demonstrates how pyKML can be used visualize geospatial data 
generated by another Python library, PyEphem (http://rhodesmill.org/pyephem/).

Example usage:
python pyephem_example.py > test.kml
'''

from datetime import datetime, timedelta
from math import pi, degrees, radians
from operator import mod
import ephem
from lxml import etree
from pykml.factory import KML_ElementMaker as KML
from pykml.factory import GX_ElementMaker as GX
import glob
import os


log_file_folder = 'E:\workspace\ADSB\*.log'

def array_to_list(lat, lon,alt):
    out = ''
    for line in zip(lat,lon,alt):
        s = str(line[1]) + "," + str(line[0]) + "," + str(line[2]) + '\n'
        out = out + s
    return out


def write_kml(lat, lon, alt, ident):
    doc = KML.Folder(
    KML.name(ident),
        KML.Placemark(
            KML.LineString(
                KML.extrude(0),
                GX.altitudeMode("absolute"),
                KML.coordinates(
                  array_to_list(lat, lon, alt)
                  )
                )
            )
    )
    #print etree.tostring(doc, pretty_print=True)
    #out_kml = open("first.kml", 'w')
    #out_kml.write(etree.tostring(doc, pretty_print=True))
    #out_kml.close()
    return doc

doc = KML.Document("ADSB")

files = glob.glob(log_file_folder)
for fname in files:
    print fname
    file = open(fname, 'r')
    ident = os.path.split(fname)[1].split('.')[0]
    print ident
    time = []
    lat = []
    lon = []
    alt = [] 
    for line in file:
        words = line.rstrip().split(';')
        time.append(words[0])
        lat.append(words[1])
        lon.append(words[2])
        alt.append(words[3])
    doc.append(write_kml(lat, lon, alt, ident))

#print lat
#print lon
#print alt
#print ident

#array_to_list(lat, lon, alt)


#print etree.tostring(doc, pretty_print=True)
out_kml = open("first.kml", 'w')
out_kml.write(etree.tostring(doc, pretty_print=True))
out_kml.close()

  
    
